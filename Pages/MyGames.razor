@page "/mygames"

@using Microsoft.JSInterop
@inject IJSRuntime JS

@inject IHttpClientFactory HttpClientFactory
@using GameStoreWeb.Models
@using GameStoreWeb.Components
@using System.Net.Http.Json
@using System.Net.Http.Headers;
@using Microsoft.AspNetCore.Components.Authorization

@inject NavigationManager Navigation

<h2 class="mb-4">My Games</h2>
<AuthorizeView>
    <Authorized>
        @if (games == null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading your games...</p>
            </div>
        }
        else if (!games.Any())
        {
            <div class="alert alert-info text-center">
                <p>You haven’t created any games yet.</p>
            </div>
        }
        else
        {
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                @foreach (var game in games)
                {
                    <GameTile Game="game" IsInCollection="false" AllowEditing="allowEdit" OnEditClicked="EditGame" />
                }
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>You must <a href="/Account/Login">log in</a>.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<GameReadDto>? games;
    private bool allowEdit = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var http = HttpClientFactory.CreateClient("GameStoreApiService");
            var token = await JS.InvokeAsync<string>("getCookie", "JWToken");

            if (!string.IsNullOrEmpty(token))
            {
                http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }
            try
            {
                games = await http.GetFromJsonAsync<List<GameReadDto>>("/api/games/Mine");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Failed to load games: {ex.Message}");
                games = new List<GameReadDto>();
            }
        }
    }

    private void EditGame(Guid gameId)
    {
        Navigation.NavigateTo($"/mygames/edit/{gameId}");
    }
}