@page "/addGame"
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject ILogger<Marketplace> Logger

@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

@using GameStoreWeb.Models
@using GameStoreWeb.Components


<h2>Add New Game</h2>

<AuthorizeView>
    <Authorized>
        <div class="mb-3">
            <label for="gameNameInput" class="form-label">Game Title</label>
            <input id="gameNameInput" type="text" class="form-control" @bind="gameName" placeholder="Enter game name" />
        </div>

        <div class="mb-3">
            <label for="descInput" class="form-label">Description</label>
            <textarea id="descInput" class="form-control" @bind="gameDescription" rows="3"></textarea>
        </div>

        <div class="mb-3">
            <label for="priceInput" class="form-label">Price (₹)</label>
            <input id="priceInput" type="number" step="0.01" class="form-control" @bind="priceRupees" />
        </div>

        <div class="mb-3">
            <label class="form-label">Thumbnail (optional)</label>
            <InputFile OnChange="HandleThumbnailSelected" />
            @if (!string.IsNullOrEmpty(thumbnailPreviewUrl))
            {
                <div class="mt-2">
                    <img src="@thumbnailPreviewUrl" width="150" />
                </div>
            }
        </div>

        <div class="mb-3">
            <label class="form-label">Select ZIP File</label>
            <InputFile OnChange="HandleFileSelected" />
        </div>

        <button class="btn btn-primary" @onclick="UploadZipAndSave"
            disabled="@(_zipFile == null || string.IsNullOrWhiteSpace(gameName))">
            Upload & Create Game
        </button>

        @if (_uploading)
        {
            <p class="mt-2">Uploading...</p>
        }

        @if (!string.IsNullOrEmpty(_gameUrl))
        {
            <h4 class="mt-3">Game Preview</h4>
            <iframe src="@_gameUrl" width="800" height="600"></iframe>
        }
    </Authorized>
    <NotAuthorized>
        <p>You must <a href="/Account/Login">log in</a>.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private IBrowserFile? _zipFile;
    private IBrowserFile? _thumbnailFile;
    private string? gameName;
    private string? gameDescription;
    private decimal? priceRupees;
    private string? _gameUrl;
    private string? thumbnailPreviewUrl;
    private string? thumbnailUrl;
    private bool _uploading = false;

    private void HandleFileSelected(InputFileChangeEventArgs e) => _zipFile = e.File;

    private async void HandleThumbnailSelected(InputFileChangeEventArgs e)
    {
        _thumbnailFile = e.File;

        using var stream = _thumbnailFile.OpenReadStream(5 * 1024 * 1024); // allow up to 5MB
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        var bytes = ms.ToArray();

        thumbnailPreviewUrl = $"data:{_thumbnailFile.ContentType};base64,{Convert.ToBase64String(bytes)}";

        StateHasChanged(); // force UI refresh
    }

    private async Task UploadZipAndSave()
    {
        if (_zipFile == null || string.IsNullOrWhiteSpace(gameName)) return;

        _uploading = true;
        try
        {
            var http = HttpClientFactory.CreateClient("GameStoreApiService");

            // 1️⃣ Upload ZIP
            using var content = new MultipartFormDataContent();
            content.Add(new StringContent(gameName), "gameName");
            var stream = _zipFile.OpenReadStream(100 * 1024 * 1024);
            content.Add(new StreamContent(stream), "zipFile", _zipFile.Name);

            var uploadResp = await http.PostAsync("api/files/upload-zip", content);
            if (!uploadResp.IsSuccessStatusCode)
            {
                Console.WriteLine(await uploadResp.Content.ReadAsStringAsync());
                return;
            }
            var uploadResult = await uploadResp.Content.ReadFromJsonAsync<UploadResponse>();
            _gameUrl = uploadResult?.Url;

            // 2️⃣ Upload Thumbnail (optional)
            if (_thumbnailFile != null)
            {
                using var thumbContent = new MultipartFormDataContent();
                var thumbStream = _thumbnailFile.OpenReadStream(5 * 1024 * 1024);

                var streamContent = new StreamContent(thumbStream);
                streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(_thumbnailFile.ContentType);

                thumbContent.Add(streamContent, "file", _thumbnailFile.Name);
                thumbContent.Add(new StringContent(gameName), "gameName"); // don't forget gameName

                var thumbResp = await http.PostAsync("api/files/upload-thumbnail", thumbContent);
                if (thumbResp.IsSuccessStatusCode)
                {
                    var thumbResult = await thumbResp.Content.ReadFromJsonAsync<UploadResponse>();
                    thumbnailUrl = thumbResult?.Url;
                }
            }

            // 3️⃣ Create Game record
            var token = await JS.InvokeAsync<string>("getCookie", "JWToken");
            if (!string.IsNullOrEmpty(token))
                http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var newGame = new GameCreateDto
            {
                Title = gameName,
                Description = gameDescription,
                GameUrl = _gameUrl,
                ThumbnailUrl = thumbnailUrl
            };

            var response = await http.PostAsJsonAsync("api/games/create", newGame);
            if (response.IsSuccessStatusCode)
            {
                var created = await response.Content.ReadFromJsonAsync<GameDto>();

                if (created != null && priceRupees.HasValue && priceRupees.Value > 0)
                {
                    long pricePaise = (long)Math.Round(priceRupees.Value * 100m);
                    await http.PutAsJsonAsync($"api/games/{created.Id}/price",
                    new { PricePaise = pricePaise, Currency = "INR" });
                }

                Navigation.NavigateTo("/marketplace");
            }
            else
            {
                Console.WriteLine("Game creation failed: " + await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
        finally
        {
            _uploading = false;
        }
    }

    private class UploadResponse
    {
        public string Url { get; set; } = string.Empty;
    }
    private class GameDto
    {
        public Guid Id { get; set; }
        [Required]
        public string Title { get; set; } = string.Empty;
        [Required]
        public string Description { get; set; } = string.Empty;
        [Required]
        public string ThumbnailUrl { get; set; } = string.Empty;
        [Required]
        public string GameUrl { get; set; } = string.Empty;
    }
}