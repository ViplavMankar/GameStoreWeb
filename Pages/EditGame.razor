@page "/mygames/edit/{GameId:guid}"

@using Microsoft.JSInterop
@inject IJSRuntime JS

@using System.Net.Http.Json
@using System.Net.Http.Headers
@using GameStoreWeb.Models
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web

<h2 class="mb-4">Edit Game</h2>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading game details...</p>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (game == null)
{
    <div class="alert alert-warning">Game not found.</div>
}
else
{
    <EditForm Model="game" OnValidSubmit="UpdateGame">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Title</label>
            <InputText class="form-control" @bind-Value="game.Title" />
        </div>

        <div class="mb-3">
            <label class="form-label">Description</label>
            <InputTextArea class="form-control" @bind-Value="game.Description" />
        </div>

        <div class="mb-3">
            <label class="form-label">Thumbnail URL</label>
            <InputText class="form-control" @bind-Value="game.ThumbnailUrl" />
        </div>

        <div class="mb-3">
            <label class="form-label">Playable Game URL</label>
            <InputText class="form-control" @bind-Value="game.GameUrl" />
        </div>

        <div class="d-flex gap-2">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <button type="button" class="btn btn-danger" @onclick="DeleteGame">Delete Game</button>
            <button type="button" class="btn btn-secondary" @onclick="() => GoBack()">Cancel</button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public Guid GameId { get; set; }
    private GameEditDto? game;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadGameDetails();
    }
    private async Task LoadGameDetails()
    {
        try
        {
            var http = HttpClientFactory.CreateClient("GameStoreApiService");
            var token = await JS.InvokeAsync<string>("getCookie", "JWToken");
            if (!string.IsNullOrEmpty(token))
            {
                http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }
            game = await http.GetFromJsonAsync<GameEditDto>($"/api/games/mine/{GameId}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load game: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    private async Task UpdateGame()
    {
        try
        {
            var http = HttpClientFactory.CreateClient("GameStoreApiService");
            var token = await JS.InvokeAsync<string>("getCookie", "JWToken");
            if (!string.IsNullOrEmpty(token))
            {
                http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }
            var response = await http.PutAsJsonAsync($"/api/games/Edit/{GameId}", game);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/mygames");
            }
            else
            {
                errorMessage = "Failed to update the game";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating game: {ex.Message}";
        }
    }
    private async Task DeleteGame()
    {
        if (!await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this game?"))
            return;

        try
        {
            var http = HttpClientFactory.CreateClient("GameStoreApiService");
            var token = await JS.InvokeAsync<string>("getCookie", "JWToken");
            if (!string.IsNullOrEmpty(token))
            {
                http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }
            var response = await http.DeleteAsync($"/api/games/Delete/{GameId}");
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/mygames");
            }
            else
            {
                errorMessage = "Failed to delete the game.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting game: {ex.Message}";
        }
    }
    private void GoBack()
    {
        Navigation.NavigateTo("/mygames");
    }
    private class GameEditDto
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string ThumbnailUrl { get; set; } = string.Empty;
        public string GameUrl { get; set; } = string.Empty;
    }
}